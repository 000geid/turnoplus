"""Add appointment block system

Revision ID: d3e8c679b5ca
Revises: a9bb91401c4c
Create Date: 2025-10-19 11:35:54.851007

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision: str = 'd3e8c679b5ca'
down_revision: Union[str, Sequence[str], None] = 'a9bb91401c4c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if tables exist before creating them
    connection = op.get_bind()
    
    # Check if system_settings table exists
    result = connection.execute(text("""
        SELECT COUNT(*) 
        FROM information_schema.tables 
        WHERE table_schema = DATABASE() 
        AND table_name = 'system_settings'
    """)).scalar()
    
    if result == 0:
        op.create_table('system_settings',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('setting_key', sa.String(length=100), nullable=False),
    sa.Column('setting_value', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_system_settings_setting_key'), 'system_settings', ['setting_key'], unique=True)
    
    # Check if appointment_blocks table exists
    result = connection.execute(text("""
        SELECT COUNT(*) 
        FROM information_schema.tables 
        WHERE table_schema = DATABASE() 
        AND table_name = 'appointment_blocks'
    """)).scalar()
    
    if result == 0:
        op.create_table('appointment_blocks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('availability_id', sa.Integer(), nullable=False),
    sa.Column('block_number', sa.Integer(), nullable=False),
    sa.Column('start_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_booked', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['availability_id'], ['doctor_availability.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('availability_id', 'block_number', name='uq_availability_block_number')
        )
    
    # Check if block_id column exists in appointments table
    result = connection.execute(text("""
        SELECT COUNT(*) 
        FROM information_schema.columns 
        WHERE table_schema = DATABASE() 
        AND table_name = 'appointments' 
        AND column_name = 'block_id'
    """)).scalar()
    
    if result == 0:
        op.add_column('appointments', sa.Column('block_id', sa.Integer(), nullable=True))
        op.create_foreign_key(None, 'appointments', 'appointment_blocks', ['block_id'], ['id'], ondelete='SET NULL')
    
    # Insert initial system settings if not exists
    op.execute(text("""
        INSERT IGNORE INTO system_settings (setting_key, setting_value, description) 
        VALUES ('appointment_block_duration_minutes', '60', 'Duration of each appointment block in minutes')
    """))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_column('appointments', 'block_id')
    op.drop_table('appointment_blocks')
    op.drop_index(op.f('ix_system_settings_setting_key'), table_name='system_settings')
    op.drop_table('system_settings')
    # ### end Alembic commands ###
